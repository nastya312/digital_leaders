"""init

Revision ID: 94b3f04b81f8
Revises: 
Create Date: 2023-11-11 02:49:34.947435

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils
import fastapi_users_db_sqlalchemy

from schemas.task import TaskStatusEnum
from schemas.task_type import PriorityEnum

# revision identifiers, used by Alembic.
revision: str = '94b3f04b81f8'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('grade',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', name='grade_name_constraint')
    )
    op.create_table('location',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('address', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('address', name='location_address_constraint')
    )
    op.create_table('point',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('address', sa.Text(), nullable=False),
    sa.Column('is_materials_delivered', sa.Boolean(), nullable=False),
    sa.Column('date_of_connection_of_the_point', sa.DateTime(timezone=True), nullable=False),
    sa.Column('date_of_issue_of_the_last_card', sa.DateTime(timezone=True), nullable=False),
    sa.Column('number_of_approved_requests', sa.SmallInteger(), nullable=False),
    sa.Column('number_of_cards_issued', sa.SmallInteger(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('address', name='point_address_constraint')
    )
    op.create_table('task_type',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('priority', sqlalchemy_utils.types.choice.ChoiceType(choices=PriorityEnum), nullable=False),
    sa.Column('duration', sa.SmallInteger(), nullable=False),
    sa.Column('minimal_grade_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['minimal_grade_id'], ['grade.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('first_name', sa.Text(), nullable=False),
    sa.Column('last_name', sa.Text(), nullable=False),
    sa.Column('patronymic', sa.Text(), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=True),
    sa.Column('role_id', sa.Enum('MANAGER', 'EMPLOYEE', name='roleenum'), nullable=False),
    sa.Column('grade_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('location_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', fastapi_users_db_sqlalchemy.generics.GUID(), nullable=False),
    sa.Column('email', sa.String(length=320), nullable=False),
    sa.Column('hashed_password', sa.String(length=1024), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['grade_id'], ['grade.id'], ),
    sa.ForeignKeyConstraint(['location_id'], ['location.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email', name='user_email_constraint')
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_table('task',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('task_type_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('point_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('executor_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('status', sqlalchemy_utils.types.choice.ChoiceType(choices=TaskStatusEnum), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['executor_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['point_id'], ['point.id'], ),
    sa.ForeignKeyConstraint(['task_type_id'], ['task_type.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('point_id', 'executor_id', 'task_type_id', name='unique_desc_date_user')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('task')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    op.drop_table('task_type')
    op.drop_table('point')
    op.drop_table('location')
    op.drop_table('grade')
    # ### end Alembic commands ###
